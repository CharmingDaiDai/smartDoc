spring:
  application:
    name: smart-doc
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:smart_doc}?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
#        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080}
      client:
        github:
          client-id: ${GITHUB_CLIENT_ID:your_github_client_id}
          client-secret: ${GITHUB_CLIENT_SECRET:your_github_client_secret}
          redirectUri: ${GITHUB_REDIRECT_URI:http://localhost:8080/api/auth/callback/github}
#          redirectUri: http://localhost:8080/dashboard
          scope: read:user,user:email
  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 50MB

server:
  port: 8080

logging:
  level:
    root: INFO
    com.mtmn.smartdoc: DEBUG

# 应用配置
application:
  security:
    jwt:
      secret-key: ${JWT_SECRET:404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970}
      expiration: 86400000 # 一天
      refresh-token:
        expiration: 604800000 # 一周
  database:
    initialize: false # 控制是否在启动时初始化数据库表和测试数据

# 模型配置
models:
  # 当前激活的模型
  activeLlm: glm
  activeEmbedding: bge-m3
  
  # 大语言模型配置
  llm:
    glm:
      api-key: ${GLM_API_KEY:your_glm_api_key}
      base-url: https://open.bigmodel.cn/api/paas/v4
      model-name: glm-4-flash
    glm-250414:
      api-key: ${GLM_API_KEY:your_glm_api_key}
      base-url: https://open.bigmodel.cn/api/paas/v4
      model-name: GLM-4-Flash-250414
    chatgpt:
      api-key: ${OPENAI_API_KEY:your-openai-api-key}
      base-url: https://api.openai.com/v1
      model-name: gpt-4
    gemini:
      api-key: ${GEMINI_API_KEY:your-gemini-api-key}
      base-url: https://generativelanguage.googleapis.com
      model-name: gemini-pro
  
  # 嵌入模型配置
  embedding:
    bge-m3:
      description: 支持 8K 长度的输入
      api-key: ${EMBEDDING_API_KEY:notnull}
      base-url: ${EMBEDDING_BASE_URL:http://localhost:9997/v1/}
      model-name: ${EMBEDDING_MODEL_NAME:bge-m3}
#    openai:
#      description: OpenAI 的嵌入模型
#      api-key: ${OPENAI_API_KEY:your-openai-api-key}
#      base-url: https://api.openai.com/v1
#      model-name: text-embedding-ada-002

# RAG 方法
rag:
  # 默认使用的 RAG 方法
  default-method: naive

  # 普通的RAG方法
  naive:
    name: RAG
    description: 普通的 RAG 方法
    index:
      chunkSize: 512
      chunkOverlap: 100
    search:
      topK: 5

  # HiSem 基础配置
  hisem:
    name: HiSem-RAG-Fast
    description: 层级语义驱动的 RAG 方法（不构建树）
    index:
      chunkSize: 2048
      titleEnhance: true
      anAbstract: false
    search:
      maxRes: 10
    threshold:
      beta: 0.9
      gamma: 0.8
      k_min: 1

  # 使用树结构的高级语义检索方法
  hisemTree:
    name: HiSem-RAG-Tree
    description: 层级语义驱动的 RAG 方法（构建树）
    index:
      chunkSize: 2048
      titleEnhance: true
      anAbstract: true
    search:
      maxRes: 10

prompt:
  intentClassifier: |
    你是RAG系统的意图识别模块。请分析用户问题是否需要进行知识库检索，并以JSON格式返回结果。
    
    **需要检索的情况：**
    - 询问具体的技术问题、产品信息、政策规定
    - 需要查找特定文档、数据、资料
    - 询问专业领域知识
    - 请求具体的操作步骤或解决方案
    
    **不需要检索的情况：**
    - 简单问候：你好、再见、谢谢
    - 日常闲聊：天气、心情、随便聊聊
    - 对前一个回答的追问、澄清、举例要求
    - 通用常识问题（如基础数学、常见概念）
    - 系统功能询问：怎么使用、帮助说明
    
    **对话历史：**
    %s
    
    **当前用户问题：**
    %s
    
    **分析要求：**
    1. 仔细考虑是否是对前一轮回答的追问
    2. 评估问题的复杂度和专业性
    3. 如果不确定，倾向于需要检索
    
    **严格按照以下JSON格式返回，不要包含任何其他内容：**
    {
      "needRetrieval": true/false,
      "reason": "简短说明判断原因",
      "questionType": "问题类型分类"
    }
  queryRewrite: |
    你是查询重写专家。根据对话上下文，将用户问题重写为更适合检索的形式。
    
    **重写原则：**
    1. 补充上下文信息，解决指代不明（如"它"、"这个"等）
    2. 将口语化表达转为标准表达
    3. 如果原问题已经清晰，保持不变
    4. 保持用户的核心意图
    5. 去掉和知识点无关的内容
    
    **对话历史：**
    %s
    
    **用户问题：**
    %s
    
    **返回JSON格式：**
    {
      "rewrittenQuery": "重写后的查询",
      "reason": "简短说明重写原因"
    }
  queryDecompose: |
    你是一名专门擅长拆解复杂问题的 AI 助手。
    你的任务是提取复杂问题中的知识点，这些知识点的答案结合起来可以解决原始问题，
    每个知识点关注原始问题的不同方面，知识点数量不超过4个，而且不要做额外的猜测。
  
    例如：原始问题：电动汽车与燃油汽车的主要区别
    输出：
    电动汽车
    燃油汽车
    
    用户问题：%s
    
    请生成知识点，每行一个，格式如下：
    第一个知识点
    第二个知识点
    以此类推...
  queryDecompose1: |
    你是一个辅助助手，负责将复杂查询分解为多个简单的子问题，以便于检索系统查找答案。
    
    示例1：
    问题：微软和谷歌去年哪个公司的利润更高？
    分解后的问题：
    微软去年赚了多少钱？
    谷歌去年赚了多少钱？
    
    示例2：
    问题：法国的首都是哪里？
    分解后的问题：
    法国的首都是哪里？
    
    现在，请分解以下问题：
    问题：%s
    分解后的问题：
  queryDecompose2: |
    你是一个专业的查询规划助手，你的任务是将用户的复杂问题分解为一个包含多个步骤的执行计划。这个计划旨在先通过检索获取必要信息，然后综合这些信息来回答原始问题。
      
    计划中的每个步骤都应被归类为以下两种类型之一：
    - "检索": 用于直接从知识库中查找事实、定义或数据的子问题。
    - "回答": 用于综合所有"检索"步骤获得的信息，进行比较、总结或推断，最终形成对原始问题的回答。这通常是计划的最后一步。
      
    请严格按照以下 JSON 格式返回一个数组，其中每个对象代表一个步骤：
    [
      {"type": "检索" 或 "回答", "query": "子问题内容"}
    ]
  
    示例:
    
    用户问题:
    微软和谷歌去年哪个公司的利润更高？
    
    执行计划 (JSON输出):
    [
      {
        "type": "检索",
        "query": "微软去年赚了多少钱？"
      },
      {
        "type": "检索",
        "query": "谷歌去年赚了多少钱？"
      },
      {
        "type": "回答",
        "query": "微软和谷歌去年哪个公司的利润更高？"
      }
    ]
    
    现在，请为以下问题制定执行计划：
    
    用户问题:
    %s
    
    执行计划 (JSON输出):

# Milvus配置
milvus:
  uri: http://${MILVUS_HOST:localhost}:${MILVUS_PORT:19530}
  host: ${MILVUS_HOST:localhost}
  port: ${MILVUS_PORT:19530}

# MinIO配置
minio:
  endpoint: ${MINIO_ENDPOINT:http://localhost:9000} #minio服务地址
  accessKey: ${MINIO_ACCESS_KEY:minioadmin} #minio的用户名
  secretKey: ${MINIO_SECRET_KEY:minioadmin} #minio的密码
  bucket:
    files: smartdoc

# Knife4j 配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: '默认分组'
      paths-to-match: '/**'
      packages-to-scan: com.mtmn.smartdoc.controller
  default-flat-param-object: true

knife4j:
  enable: true
  setting:
    language: zh-CN
    swagger-model-name: 实体类列表
    enable-swagger-models: true
    enable-document-manage: true
    enable-home-custom: false
    enable-search: true
    enable-footer: false
    enable-footer-custom: true
    footer-custom-content: Copyright © 2025 智能文档系统 | CharmingDaiDai